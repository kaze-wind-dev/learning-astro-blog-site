---
interface PaginationProps {
  limit: number;
  totalCount: number;
  page: number;
  basePath: string;
}
const { limit, totalCount, page, basePath } = Astro.props as PaginationProps;
const totalPages = Math.ceil(totalCount / limit);
const currentPage = Number.isNaN(page) ? 1 : page;
const nextPage = currentPage + 1;
const prevPage = currentPage - 1;
const getDisplayPages = (currentPage: number, totalPages: number) => {
  const maxDisplay = 7;
  if (totalPages <= maxDisplay) {
    return Array.from({ length: totalPages }, (_, i) => i + 1);
  }
  if (currentPage <= 4) {
    return [1, 2, 3, 4, 5, NaN, totalPages];
  }
  if (currentPage > totalPages - 4) {
    return [
      1,
      NaN,
      totalPages - 4,
      totalPages - 3,
      totalPages - 2,
      totalPages - 1,
      totalPages,
    ];
  }
  return [
    1,
    NaN,
    currentPage - 1,
    currentPage,
    currentPage + 1,
    NaN,
    totalPages,
  ];
};
const pageNumbers = getDisplayPages(currentPage, totalPages);
---

<nav class="c-pagination" aria-label="ページネーション">
  <ul class="c-pagination__list">
    {
      currentPage > 1 && (
        <li class="c-pagination__item">
          <a href={`${basePath}/page/${prevPage}`} class:list={["c-pagination__link", { "is-disabled": currentPage === 1 }]}>前へ</a>
        </li>
      )
    }
    {
      pageNumbers.map((pageNumber) => {
        const isCurrent = pageNumber === currentPage;
        return (
          <li
            class="c-pagination__item"
            aria-current={isCurrent ? "page" : undefined}
          >
            {Number.isNaN(pageNumber) ? (
              <span class="c-pagination__link" aria-hidden="true">
                ...
              </span>
            ) : (
              <a
                href={
                  pageNumber === 1
                    ? `${basePath}`
                    : `${basePath}/page/${pageNumber}`
                }
                class:list={["c-pagination__link", { "is-current": isCurrent }]}
              >
                {pageNumber}
              </a>
            )}
          </li>
        );
      })
    }
    {
      currentPage < totalPages && (
        <li class="c-pagination__item">
          <a
            href={`${basePath}/page/${nextPage}`}
            class:list={["c-pagination__link"]}
          >
            次へ
          </a>
        </li>
      )
    }
  </ul>
</nav>
